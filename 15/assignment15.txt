コンピュータリテラシレポート ＃15
学籍番号:1920031
氏名:山川竜太郎
提出日付:2019/08/02

[課題の再掲]
私が行ったのは、演習4a,b,c,dの4つ

演習4 揺れ動く見出しの例をそのまま打ち込んで動かせ。動いたら、次のように修正してみよ。
a. 動きを速くしたり、縦横両方に動くようにしてみよ。

b. body要素にidをつけて取得し、body要素のstyle.backgroundColorプロパティを変更することで、「クリックされるとランダムに、または徐々に色が変化」するページを作れ。

c. HTML要素の「innerHTML」プロパティに書き込むことで、その要素の内側に任意の HTML を書き込むことができる(ただの文字列であれば中身がその文字列の内容になる)。これを使って、クリックすると勝手に一部の内容が変化していく…たとえば100から1ずつカウントダウンしていくようなページを作ってみよ

d. JavaScriptを使って任意の好きな変化をおこなうページを作れ。

[実施したこととその結果]
- 演習4a
すべてstep関数の編集で済ませる。`setTimeout(step, 80);` にして、2割速くstep関数が実行されるようにした。結果は少し速くなったように観測できる。また、横方向に移動させるためにstyleのleftにランダムな値を設定した。結果としては縦方向の動きと同時に横方向に移動するようになった。

```
                num = Math.random() * 40 - 20;
                hd0.style.left = num + "px";
```

- 演習4b
以下のコードをstep関数に追加して、hd0要素のバックグラウンドの色を赤色だけ変化させるようにした。結果は、step関数を実行するたびに色が少しずつ暗くなっていく。

```
            red = 60 + Math.floor(Math.random() * 196);
            //省略
                hd0.style.backgroundColor = 'rgb(' + red + ', 0,0)';
                red -= 3;
```

- 演習4c
以下のコードをstart関数と

```
            var red_num = document.getElementById('red_num');
            red_num.innerHTML = 'REDのRGB値:' + red;
```

[考察]

とある要素を操作するときは、まず、`document.getElementById`のようにどの要素を使用するのか指定する必要がある。そのあとに`.style`とかいて要素のCSSを変更することを示す。最後に`.height`などようにCSSで書くようにスタイルを指定する。CSSの構造をプログラミングに落とし込むとドットでつなぐ書き方と理解している。思考錯誤してる最中に気が付いたことだが、CSSで`px`や`em`などの単位を指定するものについては、JavaScriptでも単位をしていしてあげないと認識されることがない。

`Math.random()`については、引数を与えない場合は0以上1未満の値をランダムで小数点で示す。それに示したい範囲内の数字に1足したものをかけて小数点を切り擦れれば、ある範囲内のうちの一つの整数を取得することができる。` Math.floor(Math.random() * 196)`は、0から195までの整数の値を一つ選ぶ処理である。`Math.random()`の最大値が1未満なため、おおよその最大値が0.999...になり、そこに指定したい範囲の最大値プラス1をかけることで最大でも指定したい範囲の最大値を取得することができる。

RGBの調整だが、`red -= 3;`のように3づつ赤の値を引いたのは、1づつ減少させると、20回step関数を繰り返すので最大でも20しか色のグラデーションを表現することができず、私の目にはほとんど変化がないように見えた。観測結果が非常に認識しづらい。したがって、3づつ減少させることで、最大60の減少をして色の変化を分かりやすくした。結果としては、これのおかげで自身の成果を認識しやすくなった。このレポートで大切なのは、事象を認識してレポートを書くので、結果としてこの施策は成功したといえる。

今回の演習4dでは、id=hd0のheightの値を指定した。なぜなら演習4aからcまでの演習でやっておらず、なおかつ今までの演習の延長で実装できると判断したためだ。この実装は、`hd0.style.height = height + 'px';`のように今までの演習のスタイル部分を変更だけであり、あまり迷わずに実装することができた。このとき頭の中にあったのは、今までの延長で何ができるかということであり、今までのJavaScriptの演習は、スタイルを変更して、JavaScriptに慣れ親しむことであるため、リファレンスからちょうどよいものがないか探して、実装した。

[アンケート]
Q1. JavaScriptのような高水準言語と前にやった機械語(アセンブリ言語)を比較してどのように感じますか。

比較的人間に読みやすいと感じます。とくに変数の操作はとても便利です。

Q2. テストケースを書くなどのソフトウェア開発の考え方についてどのように思いましたか。

テストを書くことはソフトフェアの品質を確認するために必要なものであるという理解です。

Q3. ここまでの科目全体を通して、学べたこと、学びたかったけど学べなかったことは何ですか。その他感想や、この科目の今後改善した方がよいこと、今後も維持した方がよいことの指摘もどうぞ。

アルゴリズムについて学びたいと思いました。